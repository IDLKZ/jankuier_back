import base64
import os
import uuid
from pathlib import Path
from typing import Optional

from fastapi import UploadFile
from sqlalchemy.ext.asyncio import AsyncSession

from app.core.app_exception_response import AppExceptionResponse
from app.entities import FileEntity
from app.i18n.i18n_wrapper import i18n
from app.infrastructure.app_config import app_config
from app.shared.app_file_constants import AppFileExtensionConstants


class FileService:
    """üìå –°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏"""

    UPLOAD_FOLDER = f"{app_config.static_folder}/{app_config.upload_folder}"
    ALLOWED_EXTENSIONS: dict = AppFileExtensionConstants.ALL_EXTENSIONS
    NOT_ALLOWED_EXTENSIONS = app_config.not_allowed_extensions
    MAX_FILE_SIZE_MB = app_config.app_upload_max_file_size_mb

    def __init__(self, db: AsyncSession) -> None:
        self.db = db

    def change_max_size(self, max_size_mb: float):
        self.MAX_FILE_SIZE_MB = max_size_mb

    @staticmethod
    def generate_file_path(filename: str, directory: str) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è —Ñ–∞–π–ª–∞.

        :param filename: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞.
        :param directory: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.
        :return: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É.
        """
        safe_filename = f"{uuid.uuid4().hex}_{Path(filename).name}"
        return os.path.join(directory, safe_filename)

    @staticmethod
    def validate_file(file: UploadFile, extensions=None):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –∏ –µ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ.

        :param file: –§–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.
        :param extensions: –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã).
        :raises AppExceptionResponse: –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º.
        """
        ALLOWED_EXTENSIONS = extensions or FileService.ALLOWED_EXTENSIONS

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        _, extension = os.path.splitext(file.filename)
        if (
            extension.lower() not in ALLOWED_EXTENSIONS
            or extension.lower() in FileService.NOT_ALLOWED_EXTENSIONS
        ):
            raise AppExceptionResponse.bad_request(
                message=f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞. –î–æ–ø—É—Å—Ç–∏–º—ã: {list(ALLOWED_EXTENSIONS)}"
            )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
        file.file.seek(0, os.SEEK_END)
        file_size_mb = file.file.tell() / (1024 * 1024)
        file.file.seek(0)  # –í–æ–∑–≤—Ä–∞—Ç —É–∫–∞–∑–∞—Ç–µ–ª—è —Ñ–∞–π–ª–∞ –≤ –Ω–∞—á–∞–ª–æ
        if file_size_mb > FileService.MAX_FILE_SIZE_MB:
            raise AppExceptionResponse.bad_request(
                message=f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {FileService.MAX_FILE_SIZE_MB} –ú–ë"
            )

    async def save_file(
        self, file: UploadFile, uploaded_folder: str, extensions: Optional[dict] = None
    ) -> FileEntity:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∞–π–ª –≤ —Å—Ç–∞—Ç–∏—á–Ω–æ–π –ø–∞–ø–∫–µ –∏ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.

        :param file: –ó–∞–≥—Ä—É–∂–∞–µ–º—ã–π —Ñ–∞–π–ª.
        :param uploaded_folder: –ü–∞–ø–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.
        :param extensions: –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã).
        :return: –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.
        """
        # try:
        FileService.validate_file(file, extensions)

        upload_directory = os.path.join(FileService.UPLOAD_FOLDER, uploaded_folder)
        os.makedirs(upload_directory, exist_ok=True)

        file_path = FileService.generate_file_path(file.filename, upload_directory)

        with open(file_path, "wb") as f:
            f.write(await file.read())

        file_record = FileEntity(
            filename=file.filename,
            file_path=file_path,
            file_size=os.path.getsize(file_path),
            content_type=file.content_type,
        )
        self.db.add(file_record)
        await self.db.commit()
        await self.db.refresh(file_record)
        return file_record

    # except Exception as exc:
    #     await self.db.rollback()
    #     raise AppExceptionResponse.internal_error(
    #         message="–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞",
    #         extra={"filename": file.filename, "details": str(exc)},
    #         is_custom=True,
    #     )

    async def delete_file(self, file_id: int) -> bool:
        """
        –£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª —Å –¥–∏—Å–∫–∞ –∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

        :param file_id: ID —Ñ–∞–π–ª–∞.
        :param db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        :return: True, –µ—Å–ª–∏ —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω, –∏–Ω–∞—á–µ False.
        """
        try:
            file_record = await self.db.get(FileEntity, file_id)
            if not file_record:
                return False

            if os.path.exists(file_record.file_path):
                os.remove(file_record.file_path)

            await self.db.delete(file_record)
            await self.db.commit()
            return True
        except Exception as exc:
            await self.db.rollback()
            raise AppExceptionResponse.internal_error(
                message=i18n.gettext("file_delete_error"),
                extra={"file_id": file_id, "details": str(exc)},
                is_custom=True,
            )

    async def update_file(
        self,
        file_id: int,
        new_file: UploadFile,
        uploaded_folder: str,
        extensions: Optional[dict] = None,
    ) -> FileEntity:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫–µ –∏ –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.

        :param file_id: ID —Ñ–∞–π–ª–∞.
        :param new_file: –ù–æ–≤—ã–π —Ñ–∞–π–ª.
        :param uploaded_folder: –ü–∞–ø–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.
        :param extensions: –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã).
        :return: –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å —Ñ–∞–π–ª–∞.
        """
        try:
            existing_file = await self.db.get(FileEntity, file_id)
            if not existing_file:
                raise AppExceptionResponse.bad_request(message=i18n.gettext("file_not_found"))

            if os.path.exists(existing_file.file_path):
                os.remove(existing_file.file_path)

            FileService.validate_file(new_file, extensions)

            upload_directory = os.path.join(FileService.UPLOAD_FOLDER, uploaded_folder)
            os.makedirs(upload_directory, exist_ok=True)

            new_file_path = FileService.generate_file_path(
                new_file.filename, upload_directory
            )

            with open(new_file_path, "wb") as f:
                f.write(await new_file.read())

            existing_file.filename = new_file.filename
            existing_file.file_path = new_file_path
            existing_file.file_size = os.path.getsize(new_file_path)
            existing_file.content_type = new_file.content_type
            await self.db.commit()
            await self.db.refresh(existing_file)
            return existing_file
        except Exception as exc:
            await self.db.rollback()
            raise AppExceptionResponse.internal_error(
                message=i18n.gettext("file_update_error"),
                extra={"file_id": file_id, "details": str(exc)},
                is_custom=True,
            )

    async def read_file_base64(self, file_id: int) -> str:
        """
        –ß–∏—Ç–∞–µ—Ç —Ñ–∞–π–ª –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–µ Base64.

        :param file_id: ID —Ñ–∞–π–ª–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
        :return: –°—Ç—Ä–æ–∫–∞ Base64 —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º —Ñ–∞–π–ª–∞.
        """
        file_record = await self.db.get(FileEntity, file_id)
        if not file_record or not os.path.exists(file_record.file_path):
            raise AppExceptionResponse.bad_request(message="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")

        try:
            with open(file_record.file_path, "rb") as f:
                encoded_file = base64.b64encode(f.read()).decode("utf-8")
            return encoded_file
        except Exception as e:
            raise AppExceptionResponse.internal_error(
                message=f"{i18n.gettext('file_read_error')}: {str(e)}"
            )

    async def get_full_file_path(self, file_id: int) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É.

        :param file_id: ID —Ñ–∞–π–ª–∞.
        :return: –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É.
        """
        file_record = await self.db.get(FileEntity, file_id)
        if not file_record:
            raise AppExceptionResponse.bad_request(message="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")

        return file_record.file_path

    async def save_from_bytes(
        self, file_bytes: bytes, filename: str, uploaded_folder: str
    ) -> FileEntity:
        """
        –î–µ–∫–æ–¥–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É Base64 (–∏–ª–∏ bytes) –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∞–π–ª.

        :param db: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        :param base64_str: –î–∞–Ω–Ω—ã–µ Base64 (—Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ –±–∞–π—Ç—ã).
        :param filename: –ò–º—è —Ñ–∞–π–ª–∞.
        :param uploaded_folder: –ü–∞–ø–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.
        :return: –û–±—ä–µ–∫—Ç FileEntity.
        """
        try:

            # ‚úÖ –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            upload_directory = os.path.join(
                app_config.static_folder, app_config.upload_folder, uploaded_folder
            )
            os.makedirs(upload_directory, exist_ok=True)

            # ‚úÖ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            unique_filename = f"{uuid.uuid4().hex}_{filename}"
            file_path = os.path.join(upload_directory, unique_filename)

            # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª (–ü–†–Ø–ú–û –ò–ó `bytes`)
            with open(file_path, "wb") as file:
                file.write(file_bytes)

            # ‚úÖ –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME-—Ç–∏–ø (–ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é)
            content_type = (
                "application/pdf"
                if filename.endswith(".pdf")
                else "application/octet-stream"
            )

            # ‚úÖ –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –≤ –ë–î
            file_record = FileEntity(
                filename=filename,
                file_path=file_path,
                file_size=len(file_bytes),
                content_type=content_type,
            )
            self.db.add(file_record)
            await self.db.commit()
            await self.db.refresh(file_record)

            return file_record

        except Exception as e:
            await self.db.rollback()
            raise AppExceptionResponse.internal_error(
                message="–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∏–∑ Base64",
                extra={"filename": filename, "details": str(e)},
                is_custom=True,
            )
